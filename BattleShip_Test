#include <unistd.h>
#include <stdio.h>

void	ft_putchar(char c){
	write(1, &c, 1);
}
int		ft_strlen(char const *str){
	int i;
	
	i = 0;
	while (str[i] != '\0')
		i++;
	return (i);
}
void	ft_putnbr(int n){
	int tmp;
	int nbdiv;

	if (n > -10 && n < 10)
		nbdiv = 1;
	else
		nbdiv = 10;
	if (n < 0)
	{
		n *= -1;
		ft_putchar('-');
	}
	tmp = n;
	while ((n /= 10) >= 10)
		nbdiv *= 10;
	while (nbdiv > 0)
	{
		ft_putchar(tmp / nbdiv + '0');
		tmp = tmp - ((tmp / nbdiv) * nbdiv);
		nbdiv /= 10;
	}
}
void	create_grid(int grid[12][12]){
	int 	i;
	int 	j;
	
	i = 0;
	j = 0;
	while (j <= 11)
	{
		while (i <= 11)
		{
			if (j != 0 && j != 11)
			{
				if (i == 0 || i == 11)
					grid[j][i] = -1;
				else
					grid[j][i] = 0;
			}
			else
				grid[j][i] = -1;
			i++;
		}
		i = 0;
		j++;
	}
}
void	print_grid(int grid[12][12]){
	int 	i;
	int 	j;
	
	i = 0;
	j = 0;
	while (j <= 11)
	{
		while (i <= 11)
		{
				if (grid[j][i] != -1)
				{
					if (grid[j][i] != 0)
						ft_putchar('X');
					else
						ft_putchar('-');
				ft_putchar(' ');
				}
				i++;
		}
		ft_putchar('\n');
		i = 0;
		j++;
	}
}
void	ft_putstr(char const *str){
	int i;
	
	i = 0;
	while (str[i] != '\0')
	{
		ft_putchar(str[i]);
		i++;
	}
}
int		put_ship_verif(int grid[12][12], int n, int pos_x, int pos_y, int orientation){
	int i;
	int x;
	int y;
	
	x = 0;
	y = 0;
	i = 0;
	while (i < n)
	{
		switch (orientation)
		{
			case 1 : y++; break;
			case 2 : x++; break;
			case 3 : y--; break;
			case 4 : x--; break;
		}
		if (grid[pos_x + x][pos_y + y] != 0)
			return (-1);
		i++;
	}
	return (1);
}
int		put_ship(int grid[12][12], int n, int pos_x, int pos_y, int orientation){
	int i;
	int x;
	int y;
	
	x = 0;
	y = 0;
	i = 0;
	if (put_ship_verif(grid, n, pos_x, pos_y, orientation) == -1)
		return (0);
	while (i < n)
	{
		switch (orientation)
		{
			case 1 : y++; break;
			case 2 : x++; break;
			case 3 : y--; break;
			case 4 : x--; break;
		}
		grid[pos_x + x][pos_y + y] = n;
		i++;
	}
	return (1);
}
void	ask_user(const char *str, int n){
	ft_putstr(str);
	ft_putstr(" du bateau de ");
	ft_putnbr(n);
	ft_putstr(" cases de long:\n");
}
void	player_one_setup(int grid[12][12], int n){
	int x;
	int y;
	int	orientation;
	
	if (n == 5)
		return ;
	ask_user("Donner la position X", n);
	scanf("%i",&x);
	ask_user("Donner la position Y", n);
	scanf("%i",&y);
	ask_user("Donner l'orientation", n);
	scanf("%i",&orientation);
	
	if (put_ship(grid, n, x, y, orientation) != 1)
	{
		ft_putstr("error overlap or not in map, please give new positions\n");
		player_one_setup(grid, n);
		return ;
	}
	ft_putstr("------------------------------------------------------------\n");
	player_one_setup(grid, n + 1);
	
}

// NE PAS OUBLIER DE FAIRE LE CHECK D INFO DU SCANF CAR IL ACCEPTE N IMPORTE QUOI


int main()
{
	int player_one_grid[12][12];

	create_grid(player_one_grid);
	player_one_setup(player_one_grid, 1);

	
	print_grid(player_one_grid);
	return 0;
}
